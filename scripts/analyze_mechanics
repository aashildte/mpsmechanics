#!/usr/bin/env python3

"""

Given data on displacement, this script finds average and overall values
for a number of features.

Run script as (with python 3)

    python mechanical_analysis.py [input files] [indices]

where the input files are csv/nd2 files containing displacement data,
(see README) and [indices] is a string which indicates which
properties should be recorded, e.g. given as "2 3 5". Quotation marks
required if more than one integer is given. Current supported id's:
    - average beat rate (0)
    - average displacement (1)
    - average x motion (2)
    - average y motion (3)
    - average prevalence (4)
    - average principal strain (5)
    - average principal strain in x direction (x strain) (6)
    - average principal strain in y direction (y strain) (7)

Optionally add
    -p [indices]          (e.g. -p "3 5 6")
for plotting specific properties. Must be a subset of the index set
given above.

---

The *output* of the calculations is saved as 

    metrics_average.csv

in
    the same folder as each input file ->
        subfolder with same identity as each input file ->
            "analyze_mechanics" ->
                "numerical_output"

---

The (optional) plots will be saved as png files called

    [attribute].png

following the same structure as above, with "numerical_output"
replaced with "figures".

Ã…shild Telle / Simula Research Labratory / 2019

"""

import os
import sys
import numpy as np

import mpsmechanics as mc


def get_plotting_properties(plt_ids, path_plots, idt, dimensions, Tmax):
    """

    Defines a dictionary which gives useful information about
    plotting properties; to be forwarded to plotting functions.

    Arguments:
        plt_id - (sorted) list of integers identifying
            which values to plot
        f_in - filename, including full path
        idt - string used for identification of data set
        dimensions - length and height of pictures used for recording
        Tmax - time frame (seconds)

    Return:
        Dictionary with some useful plotting information

    """

    ppl = {}

    # optional argument; default false
    for i in range(8):
        ppl[int(i)] = {"plot" : False}

    for i in plt_ids:
        ppl[i]["plot"] = True
   
    # get information specificly for metrics
    mc.add_plt_information(ppl, idt, Tmax)

    # other properties
    ppl["path"] = path_plots
    ppl["dims"] = dimensions     # size of plots over height/length
    ppl["visual check"] = False  # extra plots if applicable

    return ppl


def save_output(calc_idts, values, path_num):
    """

    Saves output to file.

    Arguments:
        idt - string with unique identity
        calc_idts - list of identities of interest
        values - list of corresponding output values
        path_num - where to save given output

    """
    
    # interleave calc_idts, values

    output_vals = []
    descriptions_all = mc.get_pr_headers()
    descriptions_loc = [descriptions_all[i] for i in calc_idts]

    headers_str = ", " + ", ".join(descriptions_loc) + "\n"
    values_str = ", ".join([idt] + list(map(str, values))) + "\n"

    filename = os.path.join(path_num, "metrics_average.csv")
    fout = open(filename, "w")
    fout.write(headers_str)
    fout.write(values_str)
    fout.close()


if __name__ == "__main__":

    # set some parameters

    alpha = 0.75
    N_d = 5
    dt = 1./100                          # cl arguments? fps
    threshold = 2E-6                     # meters per second
    dimensions = (664.30E-6, 381.55E-6)  # picture length/height

    # get input parameters

    input_files, calc_ids, plt_ids = mc.get_cl_input()

    # TODO in parallel

    for f_in in input_files:
        # create directory structure
        path, idt, _ = mc.get_input_properties(f_in)
        path_num, path_plots = \
                mc.make_default_structure(path, \
                "analyze_mechanics", idt)

        print("Analyzing data set: ", idt)

        # read + preprocess data

        disp_data, scale = mc.read_file(f_in, dimensions[0])
        disp_data = mc.do_diffusion(disp_data, alpha, N_d)
        
        # for plotting?
        T = disp_data.shape[0]
        Tmax = dt*T

        #if(len(plt_ids)>0):
        
        plt_prop = get_plotting_properties(plt_ids, path_plots, idt, \
                dimensions, Tmax)
        #else:
        #    plt_prop = {}     #??

        # calculations

        values = mc.get_numbers_of_interest(disp_data, calc_ids, \
            scale, dt, plt_prop)

        # save as ...

        save_output(calc_ids, values, path_num)

        print("Analysis of " + idt + " finished:")
        print(" * Output saved in '" + path_num + "'")
    
        if(len(plt_ids)>0):
            print(" * Specified plots saved in '" + path_plots + "'")
