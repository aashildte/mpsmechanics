#!/usr/bin/env python3

"""

Given data on displacement, this script finds average and overall values
for a number of features.

Run script as (with python 3)

    python analyze_mechanics [input files] [indices]

or install it using the setup file, running it as

    analyze_mechanics [input files] [indices]

where the input files are csv/nd2 files containing displacement data,
(see README) and [indices] is a string which indicates which
properties should be recorded, e.g. given as "2 3 5". Quotation marks
required if more than one integer is given. Current supported id's:
    - average beat rate (0)
    - average displacement (1)
    - average motion in x direction (2)
    - average motion in y direction (3)
    - average velocity (4)
    - average velocity in x direction (5)
    - average velocity in y direction (6)
    - average principal strain (7)
    - average principal strain in x direction (8)
    - average principal strain in y direction (9)
    - average prevalence (10)

Optionally add
    -p [indices]          (e.g. -p "0 2 5 8")
for plotting specific properties over time (over all spacial
coordinates), These must be a subset of the set of properties
specified as the second argument.

---

The *output* of the calculations is saved as 

    metrics_average.csv

in
    the same folder as each input file ->
        subfolder with same identity as each input file ->
            "analyze_mechanics" ->
                "numerical_output"

---

The (optional) plots over time and space will be saved as png files
in a folder i the same folder hierarchy, with "numerical_output"
replaced with "figures".

Ã…shild Telle / Simula Research Labratory / 2019

"""

import os
import sys
import numpy as np

import mpsmechanics as mc


def get_plotting_properties(plt_ids, path_plots, idt, dimensions, Tmax):
    """

    Defines a dictionary which gives useful information about
    plotting properties; to be forwarded to plotting functions.

    Arguments:
        plt_id - (sorted) list of integers identifying
            which values to plot
        f_in - filename, including full path
        idt - string used for identification of data set
        dimensions - length and height of pictures used for recording
        Tmax - time frame (seconds)

    Return:
        Dictionary with some useful plotting information

    """

    plt_p = {}

    # optional argument; default false
    for i in range(11):
        plt_p[int(i)] = {"plot" : False}

    for i in plt_ids:
        plt_p[i]["plot"] = True
   
    # get information specificly for metrics

    # other properties
    plt_p["path"] = path_plots
    plt_p["dims"] = dimensions     # size of plots over height/length
    plt_p["visual check"] = True   # extra plots if applicable
    plt_p["Tmax"] = Tmax

    return plt_p


def save_output(idt, descriptions, values, path_num):
    """

    Saves output to file.

    Arguments:
        idt    - filename
        values - dictionary of corresponding output values
        path_num - where to save given output

    """
    
    # interleave calc_idts, values

    output_vals = []

    headers_str = ", ".join([" "] + descriptions) + "\n"
    values_str = ", ".join([idt] + list(map(str, values))) + "\n"

    filename = os.path.join(path_num, "metrics_average.csv")
    fout = open(filename, "w")
    fout.write(headers_str)
    fout.write(values_str)
    fout.close()


if __name__ == "__main__":

    # input
    
    input_files, calc_ids, plt_ids = mc.get_cl_input()

    # default parameters

    alpha, N_d, dt, threshold_pv, threshold_mv, dimensions = \
            mc.get_default_parameters()

    # TODO in parallel, based on threads? - separate function

    for f_in in input_files:
        # create directory structure
        path, idt, _ = mc.get_input_properties(f_in)
        path_num, path_plots = \
                mc.make_default_structure(path, \
                "analyze_mechanics", idt)

        print("Analyzing data set: ", idt)

        # read + preprocess data

        disp_data = mc.read_file(f_in)
        disp_data = mc.do_diffusion(disp_data, alpha, N_d, over_time=True)
        
        _, X, _, _ = disp_data.shape
        scale = dimensions[0]/X

        # for plotting?
        T = disp_data.shape[0]
        Tmax = dt*T

        #if(len(plt_ids)>0):
        
        plt_prop = get_plotting_properties(plt_ids, path_plots, idt, \
                dimensions, Tmax)
        #else:
        #    plt_prop = {}     #??

        # calculations

        descriptions, values = mc.calc_metrics(disp_data, calc_ids, \
            scale, dt, plt_prop, threshold_pv, threshold_mv)

        # save as ...

        save_output(idt, descriptions, values, path_num)

        print("Analysis of " + idt + " finished:")
        print(" * Output saved in '" + path_num + "'")
    
        if(len(plt_ids)>0):
            print(" * Specified plots saved in '" + path_plots + "'")
